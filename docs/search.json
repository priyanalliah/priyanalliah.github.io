[
  {
    "objectID": "Hackathon.html",
    "href": "Hackathon.html",
    "title": "Hackathon",
    "section": "",
    "text": "Authors: Rishika Katamneni, Mumuksha Singla, Priya Nalliah, and Ashutosh Patel\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\nsales_data &lt;- data.frame(\n  Fruit = c(\"Small Apples\", \"Medium Apples\", \"Large Apples\", \"Small Oranges\", \"Large Oranges\"),\n  Quantity = c(10, 15, 20, 8, 25),\n  Width = c(0.3, 0.5, 0.7, 0.3, 0.7)  # Specify the widths for each bar\n)\n\nchart1 &lt;- ggplot(sales_data, aes(x = Fruit, y = Quantity, width = Width)) +\n  geom_bar(stat = \"identity\", fill = \"coral\") +\n  labs(title = \"Sales for Fruits of Different Sizes\", x = \"Fruit\", y = \"Quantity Sold\") +\n  theme(text=element_text(size=12,  family=\"serif\"), plot.title = element_text(hjust = 0.5))\n  \nprint(chart1)\n\n\n\n\n\nlibrary(gridExtra)\n\nWarning: package 'gridExtra' was built under R version 4.3.2\n\ndata1 &lt;- data.frame(\n  Product = c(\"A\", \"B\", \"C\", \"D\"),\n  Revenue = c(5000, 7000, 6500, 3000)\n)\n\ndata2 &lt;- data.frame(\n  Product = c(\"A\", \"B\", \"C\", \"D\"),\n  Revenue = c(2000, 5000, 6000, 1000)\n)\n\nstore1 &lt;- ggplot(data1, aes(x = Product, y = Revenue)) +\n  geom_bar(stat = \"identity\", fill = \"midnightblue\", alpha = 0.7) +\n  labs(title = \"Store 1: Product Revenue\", x = \"Product Type\", y = \"Revenue (USD)\") +\n  theme(text=element_text(size=12, family=\"serif\"), plot.title = element_text(hjust = 0.5))\n\nstore2 &lt;- ggplot(data2, aes(x = Product, y = Revenue)) +\n  geom_bar(stat = \"identity\", fill = \"seagreen4\", alpha = 0.7) +\n  labs(title = \"Store 2: Product Revenue\", x = \"Product Type\", y = \"Revenue (USD)\") +\n  theme(text=element_text(size=12, family=\"serif\"), plot.title = element_text(hjust = 0.5))\n\ncombined_chart &lt;- grid.arrange(store1, store2, ncol = 2)\n\n\n\n\n\nsales_data &lt;- data.frame(\n  Fruit = c(\"Apples\", \"Oranges\", \"Pears\", \"Kiwis\", \"Bananas\", \"Pineapples\", \"Peaches\"),\n  Quantity = c(10, 15, 20, 8, 25, 12, 18)\n)\n\nchart3 &lt;- ggplot(sales_data, aes(x = Quantity, y = Fruit)) +\n  geom_bar(stat = \"identity\", fill = \"darkslategray4\") +\n  labs(title = \"Sales for Different Fruits\", x = \"Quantity Sold\", y = \"Type of Fruit\") + \n  theme(text=element_text(size=12, family=\"serif\"), plot.title = element_text(hjust = 0.5))\n\nprint(chart3)\n\n\n\n\n\nhobbies &lt;- c(\"Baking\", \"Drawing\", \"Reading\")\ndata1 &lt;- c(20, 30, 15)\ndata2 &lt;- c(25, 15, 10)\ndata3 &lt;- c(15, 10, 13)\n\ndata_matrix &lt;- matrix(c(data1, data2, data3), nrow = length(hobbies), byrow = TRUE)\n\nbar_colors &lt;- c(\"firebrick\", \"navajowhite3\", \"darkolivegreen\")\nbar_labels &lt;- c(\"Yes\", \"No\", \"Maybe\")\n\nbarplot(data_matrix, beside = TRUE, col = bar_colors, names.arg = hobbies, main = \"Survey Reponses to Hobby Interests\", xlab = \"Hobby Categories\", ylab = \"Total Number of Reponses\", family=\"serif\")\n\nlegend(\"topright\", legend = bar_labels, fill = bar_colors)"
  },
  {
    "objectID": "Assignment 6.html",
    "href": "Assignment 6.html",
    "title": "Assignment 6",
    "section": "",
    "text": "knitr::include_app(\"https://priyanalliah.shinyapps.io/Assignment6/\")"
  },
  {
    "objectID": "Assignment 2.html",
    "href": "Assignment 2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Murrell’s Program\n\n## Start plotting from basics \n# Note the order\nplot(pressure, pch=23)  # Can you change pch?\ntext(150, 600, \n     \"Pressure (mm Hg)\\nversus\\nTemperature (Celsius)\") \n\n\n\n\n\n#  Examples of standard high-level plots \n#  In each case, extra output is also added using low-level \n#  plotting functions.\n# \n\n# Setting the parameter (3 rows by 2 cols)\npar(mfrow=c(3, 2))\n\n# Scatterplot\n# Note the incremental additions\n\nx &lt;- c(0.5, 2, 4, 8, 12, 16)\ny1 &lt;- c(1, 1.3, 1.9, 3.4, 3.9, 4.8)\ny2 &lt;- c(4, .8, .5, .45, .4, .3)\n\n# Setting label orientation, margins c(bottom, left, top, right) & text size\npar(las=1, mar=c(4, 4, 2, 4), cex=.7) \nplot.new()\nplot.window(range(x), c(0, 6))\nlines(x, y1)\nlines(x, y2)\npoints(x, y1, pch=16, cex=2) # Try different cex value?  \npoints(x, y2, pch=21, bg=\"white\", cex=2)  # Different background color\npar(col=\"gray50\", fg=\"gray50\", col.axis=\"gray50\")\naxis(1, at=seq(0, 16, 4)) # What is the first number standing for?\naxis(2, at=seq(0, 6, 2))\naxis(4, at=seq(0, 6, 2))\nbox(bty=\"u\")\nmtext(\"Travel Time (s)\", side=1, line=2, cex=0.8)\nmtext(\"Responses per Travel\", side=2, line=2, las=0, cex=0.8)\nmtext(\"Responses per Second\", side=4, line=2, las=0, cex=0.8)\ntext(4, 5, \"Bird 131\")\npar(mar=c(5.1, 4.1, 4.1, 2.1), col=\"black\", fg=\"black\", col.axis=\"black\")\n\n# Histogram\n# Random data\nY &lt;- rnorm(50)\n# Make sure no Y exceed [-3.5, 3.5]\nY[Y &lt; -3.5 | Y &gt; 3.5] &lt;- NA # Selection/set range\nx &lt;- seq(-3.5, 3.5, .1)\ndn &lt;- dnorm(x)\npar(mar=c(4.5, 4.1, 3.1, 0))\nhist(Y, breaks=seq(-3.5, 3.5), ylim=c(0, 0.5), \n     col=\"gray80\", freq=FALSE)\nlines(x, dnorm(x), lwd=2)\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n# Barplot\npar(mar=c(2, 3.1, 2, 2.1)) \nmidpts &lt;- barplot(VADeaths, \n                  col=gray(0.1 + seq(1, 9, 2)/11), \n                  names=rep(\"\", 4))\nmtext(sub(\" \", \"\\n\", colnames(VADeaths)),\n      at=midpts, side=1, line=0.5, cex=0.5)\ntext(rep(midpts, each=5), apply(VADeaths, 2, cumsum) - VADeaths/2,\n     VADeaths, \n     col=rep(c(\"white\", \"black\"), times=3:2), \n     cex=0.8)\npar(mar=c(5.1, 4.1, 4.1, 2.1))  \n\n# Boxplot\npar(mar=c(3, 4.1, 2, 0))\nboxplot(len ~ dose, data = ToothGrowth,\n        boxwex = 0.25, at = 1:3 - 0.2,\n        subset= supp == \"VC\", col=\"white\",\n        xlab=\"\",\n        ylab=\"tooth length\", ylim=c(0,35))\nmtext(\"Vitamin C dose (mg)\", side=1, line=2.5, cex=0.8)\nboxplot(len ~ dose, data = ToothGrowth, add = TRUE,\n        boxwex = 0.25, at = 1:3 + 0.2,\n        \n        subset= supp == \"OJ\")\nlegend(1.5, 9, c(\"Ascorbic acid\", \"Orange juice\"), \n       fill = c(\"white\", \"gray\"), \n       bty=\"n\")\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n# Persp\nx &lt;- seq(-10, 10, length= 30)\ny &lt;- x\nf &lt;- function(x,y) { r &lt;- sqrt(x^2+y^2); 10 * sin(r)/r }\nz &lt;- outer(x, y, f)\nz[is.na(z)] &lt;- 1\n# 0.5 to include z axis label\npar(mar=c(0, 0.5, 0, 0), lwd=0.5)\npersp(x, y, z, theta = 30, phi = 30, \n      expand = 0.5)\npar(mar=c(5.1, 4.1, 4.1, 2.1), lwd=1)\n\n# Piechart\npar(mar=c(0, 2, 1, 2), xpd=FALSE, cex=0.5)\npie.sales &lt;- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)\nnames(pie.sales) &lt;- c(\"Blueberry\", \"Cherry\",\n                      \"Apple\", \"Boston Cream\", \"Other\", \"Vanilla\")\npie(pie.sales, col = gray(seq(0.3,1.0,length=6))) \n\n\n\n# Exercise: Can you generate these charts individually?  Try these functions \n# using another dataset. Be sure to work on the layout and margins\n\nHappy Planet Data Set"
  },
  {
    "objectID": "Assignment 1.html",
    "href": "Assignment 1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "PART 1\n\n## Anscombe (1973) Quartlet\n\ndata(anscombe)  # Load Anscombe's data\n#View(anscombe) # View the data\nsummary(anscombe)\n\n       x1             x2             x3             x4           y1        \n Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260  \n 1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315  \n Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580  \n Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501  \n 3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570  \n Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840  \n       y2              y3              y4        \n Min.   :3.100   Min.   : 5.39   Min.   : 5.250  \n 1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170  \n Median :8.140   Median : 7.11   Median : 7.040  \n Mean   :7.501   Mean   : 7.50   Mean   : 7.501  \n 3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190  \n Max.   :9.260   Max.   :12.74   Max.   :12.500  \n\n## Simple version\nplot(anscombe$x1,anscombe$y1)\nsummary(anscombe)\n\n       x1             x2             x3             x4           y1        \n Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260  \n 1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315  \n Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580  \n Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501  \n 3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570  \n Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840  \n       y2              y3              y4        \n Min.   :3.100   Min.   : 5.39   Min.   : 5.250  \n 1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170  \n Median :8.140   Median : 7.11   Median : 7.040  \n Mean   :7.501   Mean   : 7.50   Mean   : 7.501  \n 3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190  \n Max.   :9.260   Max.   :12.74   Max.   :12.500  \n\n# Create four model objects\nlm1 &lt;- lm(y1 ~ x1, data=anscombe)\nsummary(lm1)\n\n\nCall:\nlm(formula = y1 ~ x1, data = anscombe)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.92127 -0.45577 -0.04136  0.70941  1.83882 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0001     1.1247   2.667  0.02573 * \nx1            0.5001     0.1179   4.241  0.00217 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6665,    Adjusted R-squared:  0.6295 \nF-statistic: 17.99 on 1 and 9 DF,  p-value: 0.00217\n\nlm2 &lt;- lm(y2 ~ x2, data=anscombe)\nsummary(lm2)\n\n\nCall:\nlm(formula = y2 ~ x2, data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.9009 -0.7609  0.1291  0.9491  1.2691 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)    3.001      1.125   2.667  0.02576 * \nx2             0.500      0.118   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6662,    Adjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002179\n\nlm3 &lt;- lm(y3 ~ x3, data=anscombe)\nsummary(lm3)\n\n\nCall:\nlm(formula = y3 ~ x3, data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.1586 -0.6146 -0.2303  0.1540  3.2411 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0025     1.1245   2.670  0.02562 * \nx3            0.4997     0.1179   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6663,    Adjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002176\n\nlm4 &lt;- lm(y4 ~ x4, data=anscombe)\nsummary(lm4)\n\n\nCall:\nlm(formula = y4 ~ x4, data = anscombe)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-1.751 -0.831  0.000  0.809  1.839 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0017     1.1239   2.671  0.02559 * \nx4            0.4999     0.1178   4.243  0.00216 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6667,    Adjusted R-squared:  0.6297 \nF-statistic:    18 on 1 and 9 DF,  p-value: 0.002165\n\nplot(anscombe$x1,anscombe$y1)\nabline(coefficients(lm1))\n\n\n\nplot(anscombe$x2,anscombe$y2)\nabline(coefficients(lm2))\n\n\n\nplot(anscombe$x3,anscombe$y3)\nabline(coefficients(lm3))\n\n\n\nplot(anscombe$x4,anscombe$y4)\nabline(coefficients(lm4))\n\n\n\n## Fancy version (per help file)\n\nff &lt;- y ~ x\nmods &lt;- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] &lt;- as.name(paste0(\"y\", i))\n  ##      ff[[3]] &lt;- as.name(paste0(\"x\", i))\n  mods[[i]] &lt;- lmi &lt;- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n\nAnalysis of Variance Table\n\nResponse: y1\n          Df Sum Sq Mean Sq F value  Pr(&gt;F)   \nx1         1 27.510 27.5100   17.99 0.00217 **\nResiduals  9 13.763  1.5292                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y2\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx2         1 27.500 27.5000  17.966 0.002179 **\nResiduals  9 13.776  1.5307                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y3\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx3         1 27.470 27.4700  17.972 0.002176 **\nResiduals  9 13.756  1.5285                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y4\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx4         1 27.490 27.4900  18.003 0.002165 **\nResiduals  9 13.742  1.5269                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsapply(mods, coef)  # Note the use of this function\n\n                  lm1      lm2       lm3       lm4\n(Intercept) 3.0000909 3.000909 3.0024545 3.0017273\nx1          0.5000909 0.500000 0.4997273 0.4999091\n\nlapply(mods, function(fm) coef(summary(fm)))\n\n$lm1\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0000909  1.1247468 2.667348 0.025734051\nx1          0.5000909  0.1179055 4.241455 0.002169629\n\n$lm2\n            Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.000909  1.1253024 2.666758 0.025758941\nx2          0.500000  0.1179637 4.238590 0.002178816\n\n$lm3\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0024545  1.1244812 2.670080 0.025619109\nx3          0.4997273  0.1178777 4.239372 0.002176305\n\n$lm4\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0017273  1.1239211 2.670763 0.025590425\nx4          0.4999091  0.1178189 4.243028 0.002164602\n\n# Preparing for the plots\nop &lt;- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"red\", pch = 21, bg = \"orange\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"blue\")\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\n\n\n\npar(op)\n\n\n\nPART 2\nGenerative Art Image 1 -\n\nGenerative Art Image 2 -\n\n\n\nPART 3\n\n# Title Fall color\n# Credit: https://fronkonstin.com\n\n# Install packages\n\n#install.packages(\"gsubfn\")\n#install.packages(\"tidyverse\")\nlibrary(gsubfn)\n\nLoading required package: proto\n\nlibrary(tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n\nWarning: package 'stringr' was built under R version 4.3.2\n\n\nWarning: package 'lubridate' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Define elements in plant art\n# Each image corresponds to a different axiom, rules, angle and depth\n\n# Leaf of Fall\n\naxiom=\"X\"\nrules=list(\"X\"=\"F-[[X]+X]+F[+FX]-X\", \"F\"=\"FF\")\nangle=22.5\ndepth=6\n\n\nfor (i in 1:depth) axiom=gsubfn(\".\", rules, axiom)\n\nactions=str_extract_all(axiom, \"\\\\d*\\\\+|\\\\d*\\\\-|F|L|R|\\\\[|\\\\]|\\\\|\") %&gt;% unlist\n\nstatus=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))\npoints=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)\n\n\n# Generating data\n# Note: may take a minute or two\n\nfor (action in actions)\n{\n  if (action==\"F\")\n  {\n    x=points[1, \"x1\"]+cos(points[1, \"alfa\"]*(pi/180))\n    y=points[1, \"y1\"]+sin(points[1, \"alfa\"]*(pi/180))\n    points[1,\"x2\"]=x\n    points[1,\"y2\"]=y\n    data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,\n               alfa=points[1, \"alfa\"],\n               depth=points[1,\"depth\"]) %&gt;% rbind(points)-&gt;points\n  }\n  if (action %in% c(\"+\", \"-\")){\n    alfa=points[1, \"alfa\"]\n    points[1, \"alfa\"]=eval(parse(text=paste0(\"alfa\",action, angle)))\n  }\n  if(action==\"[\"){\n    data.frame(x=points[1, \"x1\"], y=points[1, \"y1\"], alfa=points[1, \"alfa\"]) %&gt;%\n      rbind(status) -&gt; status\n    points[1, \"depth\"]=points[1, \"depth\"]+1\n  }\n\n  if(action==\"]\"){\n    depth=points[1, \"depth\"]\n    points[-1,]-&gt;points\n    data.frame(x1=status[1, \"x\"], y1=status[1, \"y\"], x2=NA, y2=NA,\n               alfa=status[1, \"alfa\"],\n               depth=depth-1) %&gt;%\n      rbind(points) -&gt; points\n    status[-1,]-&gt;status\n  }\n}\n\nggplot() +\n  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),\n               lineend = \"round\",\n               color=\"darkseagreen3\", # Set your own Fall color?\n               data=na.omit(points)) +\n  coord_fixed(ratio = 1) +\n  theme_void() # No grid nor axes\n\n\n\n\n\n\nPART 4\n\nThe graph shown above depicts the University of Washington’s prediction for COVID deaths back in April of 2020. This graph was published in the Washington Post article “The Grim Death-Toll Projections the White House Offered Monday Have Already Been Revised Upward”. This graph may seem a bit unreliable since it shows a large threshold for uncertainty, yet the colors used already depict a sense of danger and the large upward curve of the solid line shows a certain level of confirmation of how cases would turn out when in reality there was not that high level of certainty present. Although it was important at the time to alert the general population of the presence of this virus, this graph does very little to provide genuine details while fear-mongering at the same time."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello! My name is Priya Nalliah and I am a master’s student at UTD. I am to create meaningful data visualization projects on this website."
  },
  {
    "objectID": "Assignment 3.html",
    "href": "Assignment 3.html",
    "title": "Assignment 3",
    "section": "",
    "text": "Rerunning Anscombe\n\n## Anscombe (1973) Quartlet\ndata(anscombe)  # Load Anscombe's data\nsummary(anscombe)\n\n       x1             x2             x3             x4           y1        \n Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260  \n 1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315  \n Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580  \n Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501  \n 3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570  \n Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840  \n       y2              y3              y4        \n Min.   :3.100   Min.   : 5.39   Min.   : 5.250  \n 1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170  \n Median :8.140   Median : 7.11   Median : 7.040  \n Mean   :7.501   Mean   : 7.50   Mean   : 7.501  \n 3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190  \n Max.   :9.260   Max.   :12.74   Max.   :12.500"
  },
  {
    "objectID": "Assignment 5.html",
    "href": "Assignment 5.html",
    "title": "Assignment 5",
    "section": "",
    "text": "Original Charts\n\n# Create a sample dataset\ndata &lt;- rnorm(100)\n\n# Create a histogram\nhist(data, main=\"Histogram\", xlab=\"Time\", ylab=\"Frequency\", col=\"coral\", border=\"black\")\n\n\n\n\n\n# Create a sample dataset\ncategories &lt;- c(\"A, B, C\")\nvalues &lt;- c(24, 16, 60)\n\n# Create a bar chart\nbarplot(values, names.arg=categories, main=\"Bar Chart\", horiz = TRUE, xlab=\"Grade\", ylab=\"Exam\", col=\"lightpink\")\n\n\n\n\n\n# Create a sample dataset\ncategories &lt;- c(\"A, B, C\")\nvalues &lt;- c(24, 16, 60)\n\n# Create a horizontal bar chart\nbarplot(values, names.arg=categories, main=\"Horizontal Bar Chart\", xlab=\"Exam\", ylab=\"Grade\", col=\"lightpink\")\n\n\n\n\n\n# Create a sample dataset\ncategories &lt;- c(\"A, B, C\")\nvalues &lt;- c(24, 16, 60)\n\n# Create a pie chart\npie(values, labels=categories, main=\"Pie Chart\", col=c(\"lightpink\", \"lightyellow\", \"lightcoral\"))\n\n\n\n\n\n# Create a sample dataset\ndata &lt;- list(a=rnorm(100), b=rnorm(100, mean=2), c=rnorm(100, mean=3))\n\n# Create a box plot\nboxplot(data, main=\"Box Plot\", xlab=\"Group\", ylab=\"Value\", col=c(\"lightpink\", \"lightyellow\", \"lightcoral\"))\n\n\n\n\n\n# Create a sample dataset\nx &lt;- rnorm(50)\ny &lt;- rnorm(50)\n\n# Create a scatter plot\nplot(x, y, main=\"Scatter Plot\", xlab=\"X-axis\", ylab=\"Y-axis\", col=\"darkred\", pch=25)\n\n\n\n\n\n\nggplot2 Charts\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n# Create a sample dataset\ndata &lt;- data.frame(Value=rnorm(100))\n\n\nhistogram &lt;- ggplot(data=data, aes(x=Value, fill = categories)) +\n  geom_histogram(binwidth=0.5, fill=\"coral\", color=\"black\") +\n  labs(title=\"Histogram\", x=\"Time\", y=\"Frequency\") +\ntheme(plot.background = element_rect(color = \"black\", size = 1)) + \n   scale_fill_manual(values = c(\"lightpink\", \"lightyellow\", \"lightcoral\")) +\n  guides(fill = guide_legend(title = \"Categories\"))\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n # theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nhistogram\n\n\n\n################\n\nlibrary(ggplot2)\n\n# Data for F1 WDC Racers and their ages\nracer_data &lt;- data.frame(\n  Racer = c(\n    \"Sebastian Vettel\", \"Lewis Hamilton\", \"Michael Schumacher\", \"Nico Rosberg\",\n    \"Jenson Button\", \"Kimi Raikonnen\", \"Fernando Alonso\", \"Mika Hakkinen\",\n    \"Jacques Villeneuve\", \"Alain Prost\", \"Max Verstappen\", \"Ayrton Senna\",\n    \"Damon Hill\", \"Nigel Mansell\", \"Niki Lauda\", \"Jackie Stewart\", \"James Hunt\"\n  ),\n  Age = c(\n    23.37, 23.82, 25.84, 31.17, 29.91, 28.00, 24.08, 30.08, 26.56, 30.61,\n    24.17, 28.64, 36.02, 39.01, 26.55, 30.09, 29.08\n  )\n)\n\n# Reorder the levels of the Racer variable based on Age in descending order\nracer_data$Racer &lt;- factor(racer_data$Racer, levels = racer_data$Racer[order(racer_data$Age, decreasing = TRUE)])\n\n# Custom colors for each racer\ncolors &lt;- c(\"#FF5733\", \"#3498db\", \"#EC3FBE\", \"#3FEC50\", \"#660F18\", \"#FF0000\",\n            \"#8CCEC1\", \"#e74c3c\", \"#E8D5EB\", \"#E86E04\", \"#8e44ad\", \"#83E6FA\",\n            \"#e74c3c\", \"#2ecc71\", \"#0442EE\", \"#8e44ad\", \"#FCB271\")\n\n# Create the bar chart with bold and pretty font\nggplot(racer_data, aes(x = Racer, y = Age, fill = Racer)) +\n  geom_bar(stat = \"identity\", color = \"white\", position = \"dodge\") +\n  scale_fill_manual(values = colors) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1, face = \"bold\", size = 10),\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(size = 14),\n    axis.title.y = element_text(face = \"bold\", size = 12),\n    axis.text.y = element_text(face = \"bold\"),\n    legend.position = \"none\"\n  ) +\n  labs(\n    title = \"F1 WDC Racers and Their Ages\",\n    subtitle = \"Age in Years\",\n    y = \"Age\"\n  )\n\n\n\n################\n\nlibrary(ggplot2)\n\n# Example data (replace this with your actual data)\ngrades_data &lt;- data.frame(\n  grades = c(\"A\", \"B\", \"C\", \"D\", \"F\"),\n  count = c(10, 15, 8, 5, 2)\n)\n\n# Create a pie chart using ggplot2\npie_chart &lt;- ggplot(grades_data, aes(x = \"\", y = count, fill = grades)) +\n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  coord_polar(\"y\", start = 0) +\n  theme_void()\n\nprint(pie_chart)\n\n\n\n ##################\n\n\n\ndata &lt;- data.frame(Group=rep(c(\"A\", \"B\", \"C\"), each=100),\n                   Value=c(rnorm(100), rnorm(100, mean=2), rnorm(100, mean=3)))\n\n# Create a box plot\nggplot(data=data, aes(x=Group, y=Value, fill=Group)) +\n  geom_boxplot() +\n  labs(title=\"Box Plot\", x=\"Group\", y=\"Value\")\n\n\n\n###################\n\n\n# Create a sample dataset\ndata &lt;- data.frame(X=rnorm(50), Y=rnorm(50))\n\n# Create a scatter plot\nggplot(data=data, aes(x=X, y=Y)) +\n  geom_point(shape=19, color=\"green\") +\n  labs(title=\"Scatter Plot\", x=\"X-axis\", y=\"Y-axis\") +\n  theme(axis.text.y = element_text(angle = 45, hjust = 1))\n\n\n\n####################"
  },
  {
    "objectID": "Assignment 9.html",
    "href": "Assignment 9.html",
    "title": "Assignment 9",
    "section": "",
    "text": "Generating Time Series Charts with tsstudio and dygraphs\n\n\n# Plotting time series data using TSstudio\n# install.packages(c(\"quantmod\", \"tidyverse\",\"TSstudio\"))\n# lapply(c(\"quantmod\", \"tidyverse\",\"TSstudio\"), require, character.only = TRUE)\n\nlibrary(TSstudio)\n\nWarning: package 'TSstudio' was built under R version 4.3.2\n\nquantmod::getSymbols(\"AAPL\", src=\"yahoo\")\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\n\n[1] \"AAPL\"\n\nclass(AAPL)\n\n[1] \"xts\" \"zoo\"\n\nts_plot(AAPL$AAPL.Adjusted, \n        title = \"Apple Stock prices\",\n        Ytitle = \"\")\n\n\n\n\nclass(AAPL) # What class is this object?\n\n[1] \"xts\" \"zoo\"\n\n# Some sample dataset from TSstudio\nts_seasonal(USgas, type = \"\") # month-year matrix data\n\nWarning in ts_seasonal(USgas, type = \"\"): The 'type' parameter is\ninvalide,using the default option - 'normal'\n\n\n\n\n\n# What class is USgas?\n\n# Sample charts\nts_heatmap(USgas)\n\n\n\n\nts_cor(USgas) # ACF and PACF\n\n\n\n\nts_lags(USgas, margin = .01)\n\n\n\n\nusgas=data.frame(USgas)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Priya’s Website",
    "section": "",
    "text": "---"
  },
  {
    "objectID": "Assignment 10.html",
    "href": "Assignment 10.html",
    "title": "Assignment 10",
    "section": "",
    "text": "## R Leaflet sample program \n## file: spatial_leaflet.R\n## Create an interactive map for web using ESRI Leaflet\n# Package:  leaflet, htmlwidgets, tidyverse\n\n## install.packages(c(\"htmlwidgets\", \"leaflet\", \"tidyverse\"))\nlibrary(htmlwidgets)\n\nWarning: package 'htmlwidgets' was built under R version 4.3.2\n\nlibrary(leaflet)\n\nWarning: package 'leaflet' was built under R version 4.3.2\n\nlibrary(tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n\nWarning: package 'stringr' was built under R version 4.3.2\n\n\nWarning: package 'lubridate' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Get EPPS geocode information (i.e. lon, lat) from online geocoder websites.\n# For example: https://www.mapdevelopers.com/geocode_tool.php\n\n# Create object using leaflet setting the view at EPPS geo location)\neppsmap &lt;- leaflet() %&gt;% setView(-96.7478372, 32.9886268, zoom=14)\n\n# Create object to acquire map data from ESRI\nesri &lt;- grep(\"^Esri\", providers, value = TRUE)\n\nfor (provider in esri) {\n  eppsmap &lt;- eppsmap %&gt;% addProviderTiles(provider, group = provider)\n}\n\nfindmeat &lt;- paste(sep = \"&lt;br/&gt;\",\n                  \"&lt;b&gt;&lt;img src='https://karlho.github.io/images/karlportrait140.png' alt='Karl Ho'  style='width:45px;height:60px;' align = 'right'&gt;&lt;/b&gt;\",\n                  \"&lt;b&gt;&lt;a href='http://karlho.com' target='_blank'&gt;Karl Ho &lt;/a&gt;&lt;/b&gt;\",\n                  \"&lt;b&gt;&lt;a href='http://epps.utdallas.edu' target='_blank'&gt;School of Economic, &lt;/a&gt;&lt;/b&gt;\",\n                  \"&lt;b&gt;&lt;a href='http://epps.utdallas.edu' target='_blank'&gt;Political and Policy Sciences&lt;/a&gt;&lt;/b&gt;\",\n                  \"&lt;b&gt;&lt;a href='http://www.utdallas.edu' target='_blank'&gt;University of Texsa at Dallas&lt;/a&gt;&lt;/b&gt;\",\n                  \"800 West Campbell Road, GR31\",\n                  \"Richardson TX 75080\"\n)\n\n# Use htmlwidget::onRender function to  add custom behavior to the leaflet map using native JavaScript.\n\neppsmap %&gt;%\n  addLayersControl(baseGroups = names(esri),\n                   options = layersControlOptions(collapsed = TRUE)) %&gt;%\n  # addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,\n  #           position = \"bottomleft\") %&gt;%\n  addMarkers(eppsmap, lng=-96.7478372, lat=32.9886268, popup=findmeat)  %&gt;%\n  htmlwidgets::onRender(\"\n                        function(el, x) {\n                        var myMap = this;\n                        myMap.on('baselayerchange',\n                        function (e) {\n                        myMap.minimap.changeLayer(L.tileLayer.provider(e.name));\n                        })\n                        }\")\n\n\n\n\n\nLeaflet Map 2\n\n# Collecting and mapping Census data using API: State data and maps\n# install.packages(c(\"tidyverse\", \"ggmap\",\"mapproj\", \"tidycensus\",\"tigris\", \"tmap\", \"mapview\"))\n# lapply(c(\"tidyverse\", \"ggmap\",\"mapproj\", \"tidycensus\",\"tigris\", \"tmap\", \"mapview\"), require, character.only = TRUE)\nlibrary(tidycensus)\n\nWarning: package 'tidycensus' was built under R version 4.3.2\n\noptions(tigris_use_cache = TRUE)\n\n\ntx_income &lt;- get_acs(\n  geography = \"tract\", \n  variables = \"B19013_001\",\n  state = \"TX\", \n  year = 2020,\n  geometry = TRUE\n)\n\nGetting data from the 2016-2020 5-year ACS\n\n\nWarning: • You have not set a Census API key. Users without a key are limited to 500\nqueries per day and may experience performance limitations.\nℹ For best results, get a Census API key at\nhttp://api.census.gov/data/key_signup.html and then supply the key to the\n`census_api_key()` function to use it throughout your tidycensus session.\nThis warning is displayed once per session.\n\ntx_income\n\nSimple feature collection with 6896 features and 5 fields (with 12 geometries empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -106.6456 ymin: 25.83738 xmax: -93.50829 ymax: 36.5007\nGeodetic CRS:  NAD83\nFirst 10 features:\n         GEOID                                         NAME   variable estimate\n1  48195950100    Census Tract 9501, Hansford County, Texas B19013_001    53295\n2  48375010700       Census Tract 107, Potter County, Texas B19013_001    47738\n3  48375014100       Census Tract 141, Potter County, Texas B19013_001    38990\n4  48073950801 Census Tract 9508.01, Cherokee County, Texas B19013_001    50117\n5  48085031643    Census Tract 316.43, Collin County, Texas B19013_001    87438\n6  48085032008    Census Tract 320.08, Collin County, Texas B19013_001    84792\n7  48085032012    Census Tract 320.12, Collin County, Texas B19013_001    49429\n8  48085031715    Census Tract 317.15, Collin County, Texas B19013_001   133258\n9  48097000600          Census Tract 6, Cooke County, Texas B19013_001    52335\n10 48097000200          Census Tract 2, Cooke County, Texas B19013_001    83047\n     moe                       geometry\n1  16931 MULTIPOLYGON (((-101.6239 3...\n2  13237 MULTIPOLYGON (((-101.8173 3...\n3   7134 MULTIPOLYGON (((-101.7989 3...\n4  10458 MULTIPOLYGON (((-95.40203 3...\n5  27660 MULTIPOLYGON (((-96.75057 3...\n6  11846 MULTIPOLYGON (((-96.68251 3...\n7   8611 MULTIPOLYGON (((-96.69911 3...\n8  24557 MULTIPOLYGON (((-96.81625 3...\n9  10700 MULTIPOLYGON (((-97.13371 3...\n10 13814 MULTIPOLYGON (((-97.48509 3...\n\nplot(tx_income[\"estimate\"])\n\n\n\nlibrary(tmap)\n\nWarning: package 'tmap' was built under R version 4.3.2\n\n\nBreaking News: tmap 3.x is retiring. Please test v4, e.g. with\nremotes::install_github('r-tmap/tmap')\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ndallas_income &lt;- get_acs(\n  geography = \"tract\",\n  variables = \"B19013_001\",\n  year = 2020,\n  state = \"TX\",\n  county = \"Dallas\",\n  geometry = TRUE\n)\n\nGetting data from the 2016-2020 5-year ACS\n\ntm_shape(dallas_income) + \n  tm_fill(col = \"estimate\", palette = \"YlOrRd\",\n          alpha = 0.5)\n\n\n\n\n\nlibrary(mapview)\n\nWarning: package 'mapview' was built under R version 4.3.2\n\nmapView(dallas_income, zcol = \"estimate\")"
  },
  {
    "objectID": "Proposal.html",
    "href": "Proposal.html",
    "title": "Proposal",
    "section": "",
    "text": "Group Members: Priya Nalliah, Rishika Katamneni, Ashutosh Patel, and Mumuksha Singla\nArea/Topic:/Topic:\nFormula One (or F1) has been one of the premier forms of racing around the world since its inaugural season in 1950. The word \"formula\" represents the set of rules that the participant racers must conform to. During a Formula One season, there are a series of races known as the Grand Prix, which occur worldwide on separately built circuits and public roads. This sport has genuine global appeal and has grown into a huge business enterprise drawing a lot of sponsorship and commercialism. The plethora of data from races is intriguing to investigate and determine if there are patterns that a racer follows on the path to victory.\nThere is not a large amount of academic literature related to Formula One and the studies on the topic cover a wide range of topics such as the impact on tourism, analyses of specific tracks, computational simulations of race results, and other areas (Bell et al. 2016). In the paper by Bell et al, random coefficient models were used to find the best Formula One (F1) driver based on the relative importance of team and drive effects, weather, and other factors. The question we want to explore and visualize is also finding the best F1 driver, however, we will go in a different direction by inputting other factors such as total podiums, height, fastest laps, and more. Our main goal is to focus on diverse ways to display the vast amount of information from Formula One races so that people can easily grasp the results.\nWe want to analyze global Formula One Racing data statistics and then visualize charts for different categories such as most wins for racers, comparing various circuits, and comparing teammate statistics over the years. The best F1 driver will also be evaluated by considering certain data statistics such as their qualifying time, finishing position, and more. \nData:\nThe dataset will be manually created by collecting and combining data from different sources such as the Formula 1 official site and Stats F1. The variables included in the data are driver name, country, wins, pole position, WDC, grand slams, most wins in a season, consecutive wins, pole wins, qualifying gaps, and fastest laps. These are predominantly driver-specific statistics. We will also be looking at circuit-specific data which would include variables such as elevation, track length, and altitude.\nResearch Statement:\nThrough our report, we are trying to use various indicators to determine who the best racer is. Hence, our research statement would be who is the best Formula One driver in the dataset and how can this data from Formula One concisely be represented visually? This includes determining the best racer within the calendar year and furthering that result by determining the best racer in each continent.\nWe are also interested in exploring the relationship between teammates under the same constructor. It would be interesting to observe the dynamics between teammates by comparing their individual finishing and qualifying stats. \nMethod:\nPrimarily we will utilize various data visualization charts to summarize the results of Formula One Races. For instance, we will create a bar graph in the shape of a racing circuit to demonstrate their rankings across Europe (Figure 1).\nFurthermore, linear regression will be used to compare various factors for each race driver such as height, fastest laps, and total points. for the output variable of total grand slams. This analysis will be a way to determine the best Formula driver within the dataset.\n\nFigure 1. Visual sample of the bar graph we will create using the data.\nWe would use colors representing the flags of each nation used, and if possible, we may include a dynamic interpretation of the average speeds and times demonstrated by each racer through an animation package in R. Variables such as elevation, track length, and altitude can be demonstrated through a 3D model of this graph as well. \nReferences\nBell, Smith, J., Sabel, C. E., & Jones, K. (2016). Formula for success: Multilevel modeling of \nFormula One Driver and Constructor performance, 1950–2014. Journal of Quantitative Analysis in Sports, 12(2), 99–112. https://doi.org/10.1515/jqas-2015-0050\nF1 - the Official Home of Formula 1 Racing. Formula 1 - The Official F1 Website, \nwww.formula1.com"
  },
  {
    "objectID": "Assignment 8.html",
    "href": "Assignment 8.html",
    "title": "Assignment 8",
    "section": "",
    "text": "Project Proposal and Dashboard were planned"
  }
]